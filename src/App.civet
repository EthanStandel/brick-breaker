{ type Component, createSignal, Show, onCleanup } from "solid-js"

docEvent := <K extends keyof DocumentEventMap>(
  type: K,
  listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions
) =>
  document.addEventListener type, listener
  onCleanup (=> document.removeEventListener type, listener)

onFrame := (callback: () => (boolean | void)) =>
  onFrame := =>
    cancel := callback()
    if !cancel
      requestAnimationFrame onFrame
  requestAnimationFrame onFrame

ballWidth := 50
ballRadius := ballWidth / 2
paddleHeight := 25
paddleWidth := 200
paddleRadius := paddleWidth / 2
minPaddleCenter := paddleRadius
maxPaddleCenter := => window.innerWidth - paddleRadius
initialVelocity := => Math.max window.innerHeight, window.innerWidth
totalBallVelocity := => initialVelocity() * (1  + .05 * score())
[score, setScore] := createSignal 0
[gameState, setGameState] := createSignal<"PLAYING" | "PAUSED" | "LOSER"> "PLAYING"
gameStopped := => gameState() is not "PLAYING"
[ballAttached, setBallAttached] := createSignal true
[ballY, setBallY] := createSignal window.innerHeight - paddleHeight - ballRadius
[ballX, setBallX] := createSignal window.innerWidth / 2
[ballVelocityY, setBallVelocityY] := createSignal 0
[ballVelocityX, setBallVelocityX] := createSignal 0
[paddleCenter, setPaddleCenter] := createSignal window.innerWidth / 2
togglePause := =>
  setGameState do
    if gameState() is "PLAYING"
      "PAUSED" 
    else if gameState() is "PAUSED"
      "PLAYING" 
    else gameState()
resetGame := =>
  setTimeout (=>
    setGameState "PLAYING"
    setBallAttached true
    setBallY window.innerHeight - paddleHeight - ballRadius
    setBallX window.innerWidth / 2
    setBallVelocityY 0
    setBallVelocityX 0
    setPaddleCenter window.innerWidth / 2
    setScore 0
  ), 0
pauseOrReset := =>
  if gameState() is "LOSER"
    resetGame()
  else
    togglePause()

isMakingContact := =>
  ballX() > paddleCenter() - paddleRadius and ballX() < paddleCenter() + paddleRadius

launch := =>
  setBallAttached(false)
  setBallVelocityX(1 + totalBallVelocity() * (ballX() - paddleCenter()) / paddleRadius)
  setBallVelocityY(-1 + (-totalBallVelocity() + Math.abs(ballVelocityX())))

App: Component := =>
  <Ball>
  <Player>
  <GameStatus>
  <GithubLink>

Ball: Component := =>
  lastFrameTime .= new Date().getTime()
  onFrame (=>
    now := new Date().getTime()
    duration := (now - lastFrameTime) / 1000
    lastFrameTime = now
    if ballAttached() or gameStopped() return
    nextY := ballY() + ballVelocityY() * duration
    if nextY < ballRadius
      setBallVelocityY -ballVelocityY()
      setBallY ballRadius
    else if nextY > window.innerHeight - paddleHeight - ballRadius and isMakingContact()
      setScore score() + 1
      launch()
    else if nextY > window.innerHeight - ballRadius
      setBallY window.innerHeight - ballRadius
      setGameState "LOSER"
    else
      setBallY nextY

    nextX := ballX() + ballVelocityX() * duration
    if nextX > window.innerWidth - ballRadius
      setBallVelocityX -ballVelocityX()
      setBallX window.innerWidth - ballRadius
    else if nextX < ballRadius
      setBallVelocityX -ballVelocityX()
      setBallX ballRadius
    else
      setBallX nextX
    return
  )

  <div style={
    height: `${ballWidth}px`
    width: `${ballWidth}px`
    background: "white"
    "border-radius": "50%"
    top: 0
    left: 0
    position: "fixed"
    "will-change": "transform"
    "box-shadow": `${-ballVelocityX() / 100}px ${-ballVelocityY() / 100}px 20px -20px white`
    transform: `translateY(calc(${ballY()}px - 50%)) translateX(calc(${ballX()}px - 50%))`
  }>
    <div style={do
      trailSize := if ballAttached() then 0 else ballWidth * (1 + ((score() + 2) * .1))
      {
        background: "linear-gradient(270deg, white, transparent)"
        position: "absolute"
        top: "50%"
        left: "50%"
        transform: do
          radians := Math.atan2(ballVelocityY(), ballVelocityX())
          trail := trailSize / 2 - ballWidth / 2
          ```
            translate(
              calc(-50% + ${trail * -Math.cos(radians)}px),
              calc(-50% + ${trail * -Math.sin(radians)}px)
            )
            rotate(${radians}rad)
          ```
        height: `${ballWidth}px`
        width: `${trailSize}px`
        "border-radius": `${ballRadius}px`
        "z-index": -1
      }
    }>

Player := => 
  movePlayer := (x: number) =>
    if gameStopped() return
    setPaddleCenter do
      if x < minPaddleCenter then minPaddleCenter
      else if x > maxPaddleCenter() then maxPaddleCenter()
      else x

  docEvent "touchmove", (({ touches }) => 
    movePlayer touches[0].clientX
  )

  docEvent "mousemove", (({ clientX }) => 
    movePlayer clientX
  )

  docEvent "click", (=> if isMakingContact() and ballAttached() then launch())

  <div style={
    height: `${paddleHeight}px`
    width: `${paddleWidth}px`
    background: "white"
    position: "fixed"
    left: 0
    bottom: 0
    "pointer-events": "none"
    "will-change": "transform"
    transform: `translateX(calc(${paddleCenter()}px - 50%))`
  }>

GameStatus := =>
  docEvent "keydown", (({ key }) => if key is "Escape" then pauseOrReset())

  <div style={
    position: "fixed"
    top: "25px"
    left: "25px"
    color: "white"
    "font-size": "50px"
    "text-shadow": "0 0 10px black"
    "user-select": "none"
  }>{score()}
  <Show when={gameStopped()}>
    <div style={
      position: "fixed"
      top: "50%"
      left: "50%"
      transform: "translate(-50%, -50%)"
      color: "white"
      "font-size": "min(20vh, 20vw)"
      "text-shadow": "0 0 10px black"
      "user-select": "none"
    }>{gameState()}
  <button 
    style={
      all: "unset"
      cursor: "pointer"
      position: "fixed"
      top: "25px"
      right: "25px"
    }
    onClick=pauseOrReset>
    <svg width="50" height="50">
      <Show when={gameState() is "LOSER" or gameState() is "PAUSED"}>
        <polygon points="5,0 45,25 5,50" fill="white" />
      <Show when={gameState() is "PLAYING"}>
        <rect x="0" y="0" width="20" height="50" fill="white" />
        <rect x="30" y="00" width="20" height="50" fill="white" />

GithubLink := =>
  <a href="https://github.com/EthanStandel/pong/blob/main/src/App.civet"
    style={
      position: "fixed"
      bottom: "25px"
      right: "25px"
    }
    target="_blank"
    rel="noopener noreferrer">
    <img width="50" height="50" src="/github.svg">

export default App