{ type Component, createSignal, Show, onCleanup } from "solid-js"
{ onFrame } from "./utils/onFrame.civet"


docEvent := <K extends keyof DocumentEventMap>(
  type: K,
  listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions
) =>
  document.addEventListener type, listener
  onCleanup (=> document.removeEventListener type, listener)

ballHeight := 50
ballRadius := ballHeight / 2
paddleWidth := 25
paddleHeight := 200
paddleRadius := paddleHeight / 2
minPaddleCenter := paddleRadius
maxPaddleCenter := () => window.innerHeight - paddleRadius
totalBallVelocity := () => Math.max(window.innerWidth, window.innerHeight)
[score, setScore] := createSignal 0
[gameState, setGameState] := createSignal<"PLAYING" | "PAUSED" | "LOSER"> "PLAYING"
gameStopped := => gameState() is not "PLAYING"
[ballAttached, setBallAttached] := createSignal true
[ballX, setBallX] := createSignal paddleWidth + ballRadius
[ballY, setBallY] := createSignal window.innerHeight / 2
[ballVelocityX, setBallVelocityX] := createSignal 0
[ballVelocityY, setBallVelocityY] := createSignal 0
[paddleCenter, setPaddleCenter] := createSignal window.innerHeight / 2
togglePause := =>
  setGameState do
    if gameState() is "PLAYING"
      "PAUSED" 
    else if gameState() is "PAUSED"
      "PLAYING" 
    else gameState()
resetGame := =>
  setGameState "PLAYING"
  setBallAttached true
  setBallX paddleWidth + ballRadius
  setBallY window.innerHeight / 2
  setBallVelocityX 0
  setBallVelocityY 0
  setPaddleCenter window.innerHeight / 2
pauseOrReset := =>
  if gameState() is "LOSER"
    resetGame()
  else
    togglePause()

isMakingContact := =>
  ballY() > paddleCenter() - paddleRadius and ballY() < paddleCenter() + paddleRadius

launch := =>
  setBallAttached(false)
  setBallVelocityY(1 + totalBallVelocity() * (ballY() - paddleCenter()) / paddleRadius)
  setBallVelocityX(1 + (totalBallVelocity() - Math.abs(ballVelocityY())))

App: Component := =>
  <Ball>
  <Player>
  <GameStatus>

Ball: Component := =>
  lastFrameTime .= new Date().getTime()
  onFrame (=>
    now := new Date().getTime()
    duration := (now - lastFrameTime) / 1000
    lastFrameTime = now
    if !ballAttached() and !gameStopped()
      nextX := ballX() + ballVelocityX() * duration
      if nextX > window.innerWidth - ballRadius
        setBallVelocityX -ballVelocityX()
        setBallX window.innerWidth - ballRadius
      else if nextX < paddleWidth + ballRadius and isMakingContact()
        setScore score() + 1
        launch()
      else if nextX < ballRadius
        setGameState "LOSER"
      else
        setBallX nextX

      nextY := ballY() + ballVelocityY() * duration
      if nextY > window.innerHeight - ballRadius
        setBallVelocityY -ballVelocityY()
        setBallY window.innerHeight - ballRadius
      else if nextY < ballRadius
        setBallVelocityY -ballVelocityY()
        setBallY ballRadius
      else
        setBallY nextY
      return
  )

  <div style={
    width: `${ballHeight}px`
    height: `${ballHeight}px`
    background: "white"
    "border-radius": "50%"
    top: 0
    left: 0
    position: "fixed"
    "will-change": "transform"
    transform: `translateX(calc(${ballX()}px - 50%)) translateY(calc(${ballY()}px - 50%))`
  }>

Player := => 
  movePlayer := (y: number) =>
    if gameStopped() return
    setPaddleCenter do
      if y < minPaddleCenter then minPaddleCenter
      else if y > maxPaddleCenter() then maxPaddleCenter()
      else y

  docEvent "touchmove", (({ touches }) => 
    movePlayer touches[0].clientY
  )

  docEvent "mousemove", (({ clientY }) => 
    movePlayer clientY
  )

  docEvent "click", (=> if isMakingContact() and ballAttached() then launch())

  <div style={
    width: `${paddleWidth}px`
    height: `${paddleHeight}px`
    background: "white"
    position: "fixed"
    left: 0
    top: 0
    "pointer-events": "none"
    "will-change": "transform"
    transform: `translateY(calc(${paddleCenter()}px - 50%))`
  }>

GameStatus := =>
  docEvent "keydown", (({ key }) => if key is "Escape" then pauseOrReset())

  <div style={
    position: "fixed"
    top: "25px"
    left: "25px"
    color: "white"
    "font-size": "50px"
    "text-shadow": "0 0 10px black"
    "user-select": "none"
  }>{score()}
  <Show when={gameStopped()}>
    <div style={
      position: "fixed"
      top: "50%"
      left: "50%"
      transform: "translate(-50%, -50%)"
      color: "white"
      "font-size": "min(20vh, 20vw)"
      "text-shadow": "0 0 10px black"
      "user-select": "none"
    }>{gameState()}
  <button 
    style={
      all: "unset"
      cursor: "pointer"
      position: "fixed"
      top: "25px"
      right: "25px"
    }
    onClick=pauseOrReset
  >
    <svg height="50" width="50">
      <Show when={gameState() is "LOSER" or gameState() is "PAUSED"}>
        <polygon points="5,0 45,25 5,50" fill="white" />
      <Show when={gameState() is "PLAYING"}>
        <rect x="0" y="0" width="20" height="50" fill="white" />
        <rect x="30" y="00" width="20" height="50" fill="white" />

export default App