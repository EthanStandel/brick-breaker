{ createSignal } from "solid-js"

initalBrickCount := 50
brickBorder := 4
brickLeftSpacing := 50
brickTop := 75
brickWidth := window.innerWidth / 5
brickLeft := (window.innerWidth - brickLeftSpacing * 2) % brickWidth / 2 + brickLeftSpacing
brickHeight := window.innerHeight / 25
maxBricksPerRow := Math.floor((window.innerWidth - brickLeftSpacing * 2) / brickWidth)
getInitialBricks := => ((Array.from { length: initalBrickCount }).map ((_, i) => ({
  health: createSignal (Math.floor(Math.random() * 4))
  id: i
})))
[bricks, setBricks] := createSignal getInitialBricks()
[bricksLeft, setBricksLeft] := createSignal(bricks().filter(({ health: [health] }) => !!health()).length)

getTopOfBrick := (id: number) =>
  brickHeight * Math.floor(id / maxBricksPerRow)
getBottomOfBrick := (id: number) =>
  getTopOfBrick(id) + brickHeight
getLeftOfBrick := (id: number) =>
  id % maxBricksPerRow * brickWidth
getRightOfBrick := (id: number) =>
  getLeftOfBrick(id) + brickWidth

getBrickDimensions := (id: number) => ({
  top: getTopOfBrick(id) + brickTop
  bottom: getBottomOfBrick(id) + brickTop
  left: getLeftOfBrick(id) + brickLeft
  right: getRightOfBrick(id) + brickLeft
})

export brickState := {
  bricks
  setBricks
  bricksLeft
  setBricksLeft
  brickBorder
  brickLeftSpacing
  brickTop
  brickWidth
  brickLeft
  brickHeight
  maxBricksPerRow
  getTopOfBrick
  getBottomOfBrick
  getLeftOfBrick
  getRightOfBrick
  getBrickDimensions
  reset: =>
    setBricks getInitialBricks()
    setBricksLeft bricks().filter(({ health: [health] }) => !!health()).length
}