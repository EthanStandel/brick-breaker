{ createSignal, createEffect } from "solid-js"
{ screenState } from "./screenState.civet"
{ memo } from "../utils/memo.civet"
{ rand } from "../utils/rand.civet"

initalBrickCount := 50
brickBorder := 3
maxBricksPerRow := => 5
brickLeftSpacing := => screenState.gameContainerSize() / (maxBricksPerRow() + 2)
brickTop := => screenState.gameContainerSize() / 20
brickWidth := => brickLeftSpacing()
brickLeft := => brickLeftSpacing()
brickHeight := => brickTop()

export type BrickVariant = "unbreakable" | "default"

getInitialBricks := =>
  variants: Array<{type: BrickVariant; left: number }> := [
    { type: "unbreakable", left: 3 }
  ]
  (Array.from { length: initalBrickCount }).map ((_, i) =>
    variant := do 
      if rand.isOneIn(10)
        randomVariant := rand.arrayElement(
          variants.filter((element) => element.left > 0)
        )
        if randomVariant
          randomVariant.left -= 1
          randomVariant.type
        else
          "default" as const
      else
        "default" as const
    {
      variant
      health: createSignal if variant is "unbreakable" then Infinity else rand.inclusiveBetween(0, 3)
      id: i
    }
  )
[bricks, setBricks] := createSignal getInitialBricks()
getBricksLeft := => bricks().filter(({ health: [health], variant }) => 
  health() is not 0 and variant is not "unbreakable"
).length
[bricksLeft, setBricksLeft] := createSignal getBricksLeft()

getTopOfBrick := (id: number) =>
  brickHeight() * Math.floor(id / maxBricksPerRow())
getBottomOfBrick := (id: number) =>
  getTopOfBrick(id) + brickHeight()
getLeftOfBrick := (id: number) =>
  id % maxBricksPerRow() * brickWidth()
getRightOfBrick := (id: number) =>
  getLeftOfBrick(id) + brickWidth()

getBrickDimensions := memo((id: number) => ({
  top: getTopOfBrick(id) + brickTop()
  bottom: getBottomOfBrick(id) + brickTop()
  left: getLeftOfBrick(id) + brickLeft()
  right: getRightOfBrick(id) + brickLeft()
}))

export brickState := {
  bricks
  setBricks
  bricksLeft
  setBricksLeft
  brickBorder
  brickLeftSpacing
  brickTop
  brickWidth
  brickLeft
  brickHeight
  maxBricksPerRow
  getTopOfBrick
  getBottomOfBrick
  getLeftOfBrick
  getRightOfBrick
  getBrickDimensions
  reset: =>
    setBricks getInitialBricks()
    setBricksLeft getBricksLeft()
}